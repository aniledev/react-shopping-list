{"version":3,"sources":["Form/AddItemForm.js","ShoppingItem/ShoppingItem.js","ShoppingList/ShoppingList.js","App/App.js","index.js"],"names":["AddItemForm","onSubmitForm","e","preventDefault","props","onAddItem","target","add","value","className","onSubmit","this","htmlFor","id","type","placeholder","aria-label","min","name","React","Component","ShoppingItem","style","textDecoration","item","checked","onClick","onCheckItem","onDeleteItem","ShoppingList","items","map","index","defaultProps","App","state","shoppingItem","handleDeleteItem","newItems","filter","itm","setState","handleCheckItem","handleAddItem","itemName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAIqBA,G,kNAEnBC,aAAe,SAACC,GACdA,EAAEC,iBAGF,EAAKC,MAAMC,UAAUH,EAAEI,OAAOC,IAAIC,Q,uDAKlC,OACE,uBAAMC,UAAU,OAAOC,SAAUC,KAAKV,aAAtC,UACE,uBAAOW,QAAQ,MAAMH,UAAU,WAAWI,GAAG,WAA7C,sBAGA,uBACEC,KAAK,OACLL,UAAU,MACVI,GAAG,MACHE,YAAY,UACZC,aAAW,qBACXC,IAAK,EACLC,KAAK,QAEP,wBAAQJ,KAAK,SAAb,6B,GAzBiCK,IAAMC,YCFhC,SAASC,EAAajB,GACnC,OACE,+BACE,oBAEEkB,MAAO,CACLC,eAAgBnB,EAAMoB,KAAKC,QAAU,eAAiB,MAH1D,SAMGrB,EAAMoB,KAAKN,OAEd,wBAAQQ,QAAS,kBAAMtB,EAAMuB,YAAYvB,EAAMoB,OAAOV,KAAK,SAA3D,mBAGA,wBAAQY,QAAS,kBAAMtB,EAAMwB,aAAaxB,EAAMoB,OAAOV,KAAK,SAA5D,uBCXS,SAASe,EAAazB,GACnC,OACE,6BAEGA,EAAM0B,MAAMC,KAAI,SAACP,EAAMQ,GAAP,OACf,cAACX,EAAD,CAEEG,KAAMA,EACNI,aAAcxB,EAAMwB,aACpBD,YAAavB,EAAMuB,aAHdK,QDYfX,EAAaY,aAAe,CAC1BT,KAAM,ICHRK,EAAaI,aAAe,CAC1BH,MAAO,I,ICdYI,E,4MAEnBC,MAAQ,CACNC,aAAc,CACZ,CAAElB,KAAM,SAAUO,SAAS,GAC3B,CAAEP,KAAM,UAAWO,SAAS,GAC5B,CAAEP,KAAM,QAASO,SAAS,K,EAK9BY,iBAAmB,SAACb,GAGlB,IAAMc,EAAW,EAAKH,MAAMC,aAAaG,QAAO,SAACC,GAAD,OAASA,IAAQhB,KAEjE,EAAKiB,SAAS,CACZL,aAAcE,K,EAIlBI,gBAAkB,SAAClB,GAEjB,IAAMc,EAAW,EAAKH,MAAMC,aAAaL,KAAI,SAACS,GAK5C,OAHIA,IAAQhB,IACVgB,EAAIf,SAAWe,EAAIf,SAEde,KAGT,EAAKC,SAAS,CACZL,aAAcE,K,EAKlBK,cAAgB,SAACC,GACf,IAAMN,EAAQ,sBACT,EAAKH,MAAMC,cADF,CAEZ,CAAElB,KAAM0B,EAAUnB,SAAS,KAG7B,EAAKgB,SAAS,CACZL,aAAcE,K,uDAIR,IACAF,EAAiBzB,KAAKwB,MAAtBC,aAER,OACE,qCACE,wBAAQ3B,UAAU,SAAlB,SACE,iDAEF,uBAAMA,UAAU,OAAhB,UACE,kCACE,cAAC,EAAD,CAAaJ,UAAWM,KAAKgC,kBAE/B,kCAEE,cAACd,EAAD,CACEC,MAAOM,EACPR,aAAcjB,KAAK0B,iBACnBV,YAAahB,KAAK+B,8B,GAjECvB,IAAMC,WCHvCyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.aa9e9a43.chunk.js","sourcesContent":["import React from \"react\";\n\n// a form with an input and a submit button to add items to the list\n\nexport default class AddItemForm extends React.Component {\n  // prevent default submission of the form\n  onSubmitForm = (e) => {\n    e.preventDefault();\n    // e.target['inputName'] references `<input name='inputName' />`\n    // pass in the value of the input form into the onAddItem callback props\n    this.props.onAddItem(e.target.add.value);\n  };\n\n  // buttons are not wired up, not functional yet\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.onSubmitForm}>\n        <label htmlFor=\"add\" className=\"add-form\" id=\"add-form\">\n          Add Item\n        </label>\n        <input\n          type=\"text\"\n          className=\"add\"\n          id=\"add\"\n          placeholder=\"carrots\"\n          aria-label=\"Shopping list item\"\n          min={1}\n          name=\"add\"\n        ></input>\n        <button type=\"submit\">Add Item</button>\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function ShoppingItem(props) {\n  return (\n    <li>\n      <h2\n        // use a ternary operator; if the props.item.checked evalutes to true then apply the line-through text-declaraction, if it doesn't evaluate to true then apply null\n        style={{\n          textDecoration: props.item.checked ? \"line-through\" : null,\n        }}\n      >\n        {props.item.name}\n      </h2>\n      <button onClick={() => props.onCheckItem(props.item)} type=\"button\">\n        check\n      </button>\n      <button onClick={() => props.onDeleteItem(props.item)} type=\"button\">\n        delete\n      </button>\n    </li>\n  );\n}\n\nShoppingItem.defaultProps = {\n  item: {},\n};\n","import React from \"react\";\nimport ShoppingItem from \"../ShoppingItem/ShoppingItem\";\n\n// an individual item within the list that contains a check button and delete button. There will be 0 or more of these\n\nexport default function ShoppingList(props) {\n  return (\n    <ul>\n      {/* map over each item in the props that are passed down and create a ShoppingItem component for each one */}\n      {props.items.map((item, index) => (\n        <ShoppingItem\n          key={index}\n          item={item}\n          onDeleteItem={props.onDeleteItem}\n          onCheckItem={props.onCheckItem}\n        />\n      ))}\n    </ul>\n  );\n}\n\nShoppingList.defaultProps = {\n  items: [],\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport AddItemForm from \"../Form/AddItemForm\";\nimport ShoppingList from \"../ShoppingList/ShoppingList\";\n\n// this component will contain teh app's title, the add item form, and the shopping list\n// it also contains sample state\n\nexport default class App extends React.Component {\n  // initialize state for App component because its the lowest common ancestor of the components that update and read state\n  state = {\n    shoppingItem: [\n      { name: \"apples\", checked: false },\n      { name: \"oranges\", checked: true },\n      { name: \"bread\", checked: false },\n    ],\n  };\n\n  // DON'T FORGET THE USE OF ARROW FUNCTIONS SO WE AVOID UNDEFINED ERRORS\n  handleDeleteItem = (item) => {\n    // create a new array for the shoppingItem that removes the deleted item\n    // use the filter method to create a new array where each item in the new array does equal the item passed in from the delete callback prop\n    const newItems = this.state.shoppingItem.filter((itm) => itm !== item);\n    // assign the this.state.shoppingItem to the new array that we have filtered\n    this.setState({\n      shoppingItem: newItems,\n    });\n  };\n\n  handleCheckItem = (item) => {\n    // use the map method to map over the current array\n    const newItems = this.state.shoppingItem.map((itm) => {\n      // if itm in the current state array is equal to the item passed in from the check callback props, toggle the boolean value of the map\n      if (itm === item) {\n        itm.checked = !itm.checked;\n      }\n      return itm;\n    });\n    // set the state with the new array\n    this.setState({\n      shoppingItem: newItems,\n    });\n  };\n\n  // use the spread operator to create a new array with the new object added to the array\n  handleAddItem = (itemName) => {\n    const newItems = [\n      ...this.state.shoppingItem,\n      { name: itemName, checked: false },\n    ];\n    // use this.setState to set the new created array as the new state\n    this.setState({\n      shoppingItem: newItems,\n    });\n  };\n\n  render() {\n    const { shoppingItem } = this.state;\n    // pass this state down as props to the ShoppingList component\n    return (\n      <>\n        <header className=\"header\">\n          <h1>Shopping List</h1>\n        </header>\n        <main className=\"main\">\n          <section>\n            <AddItemForm onAddItem={this.handleAddItem} />\n          </section>\n          <section>\n            {/* add the two callback props to the component */}\n            <ShoppingList\n              items={shoppingItem}\n              onDeleteItem={this.handleDeleteItem}\n              onCheckItem={this.handleCheckItem}\n            />\n          </section>\n        </main>\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}